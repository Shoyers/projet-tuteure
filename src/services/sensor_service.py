import threading;
import random;
import serial;
from src.models.sensor import Sensor;
from src.database.connection import DatabaseConnection;
from src.database.query_manager import QueryManager;

# Service pour la gestion des capteurs
class SensorService:
    def __init__(self):
        self.sensor = Sensor();
        self.db = DatabaseConnection();
        self.queryManager = None;
        if self.db.isConnected():
            self.queryManager = QueryManager(self.db);
        self.running = False;
        self.demoMode = False;
        self.dataThread = None;
        self.onDataUpdate = None;  # Callback pour la mise Ã  jour de l'interface
        self.serialPort = None;
        self.portName = None;

    # VÃ©rifie si le service est connectÃ© Ã  un port sÃ©rie
    def isConnected(self):
        """
        Returns:
            True si le service est connectÃ© Ã  un port sÃ©rie, False sinon
        """
        return self.serialPort is not None and not self.demoMode;
    
    # VÃ©rifie si le service est disponible (connectÃ© ou en mode dÃ©mo)
    def isAvailable(self):
        """
        Returns:
            True si le service est disponible (connectÃ© ou en mode dÃ©mo), False sinon
        """
        return self.isConnected() or self.demoMode;

    # Se connecte Ã  un port sÃ©rie
    def connect(self, portName, baudrate=9600):
        try:
            self.serialPort = serial.Serial(portName, baudrate);
            self.portName = portName;
            # Attendre que le port soit prÃªt
            import time
            time.sleep(2)  # Donner du temps Ã  Arduino/Xbee pour s'initialiser
            # Vider le buffer d'entrÃ©e
            if self.serialPort:
                self.serialPort.reset_input_buffer()
            return True;
        except Exception as e:
            print(f"Erreur lors de la connexion au port {portName}: {str(e)}");
            self.serialPort = None;
            self.portName = None;
            return False;
    
    # Se dÃ©connecte du port sÃ©rie
    def disconnect(self):
        if self.serialPort:
            try:
                self.stop();
                self.serialPort.close();
                self.serialPort = None;
                self.portName = None;
                return True;
            except Exception as e:
                print(f"Erreur lors de la dÃ©connexion: {str(e)}");
                return False;
        return True;
    
    # Retourne le nom du port sÃ©rie connectÃ©
    def getPort(self):
        return self.portName;
    
    # DÃ©marre la lecture des donnÃ©es des capteurs
    def start(self, serialPort=None):
        if serialPort:
            self.serialPort = serialPort;
            self.demoMode = False;
        else:
            self.demoMode = True;

        self.running = True;
        self.dataThread = threading.Thread(target=self._readDataThread);
        self.dataThread.daemon = True;
        self.dataThread.start();
 
    # ArrÃªte la lecture des donnÃ©es
    def stop(self):
        self.running = False;
        if self.dataThread:
            self.dataThread.join();

    # Thread de lecture des donnÃ©es
    def _readDataThread(self):
        while self.running:
            try:
                if self.demoMode:
                    self._generateDemoData();
                else:
                    self._readSerialData();

                # Mise Ã  jour de l'interface via le callback
                if self.onDataUpdate:
                    self.onDataUpdate(self.sensor.toDict());

                # Sauvegarde dans la base de donnÃ©es
                if self.db.isConnected():
                    if self.queryManager is None:
                        self.queryManager = QueryManager(self.db);
                    
                    # CrÃ©er un dictionnaire avec le timestamp actuel
                    from datetime import datetime
                    data = self.sensor.toDict();
                    data['timestamp'] = datetime.now().strftime('%Y-%m-%d %H:%M:%S');
                    
                    # InsÃ©rer les donnÃ©es
                    self.queryManager.insertSensorData(data);

            except Exception as e:
                print(f'Erreur lors de la lecture des donnÃ©es: {str(e)}');

    # Lit les donnÃ©es depuis le port sÃ©rie
    def _readSerialData(self):
        try:
            if self.serialPort:
                # VÃ©rifier si des donnÃ©es sont disponibles
                try:
                    available_bytes = self.serialPort.in_waiting
                except AttributeError:
                    available_bytes = self.serialPort.inWaiting()
                
                if available_bytes > 0:
                    print(f"DonnÃ©es disponibles sur le port sÃ©rie: {available_bytes} octets")
                    # Lire toutes les donnÃ©es disponibles
                    lines_read = 0
                    max_lines = 20  # AugmentÃ© pour capturer plus de lignes par cycle
                    
                    collected_data = []  # Pour collecter toutes les lignes de donnÃ©es valides
                    
                    while available_bytes > 0 and lines_read < max_lines:
                        # Lire une ligne complÃ¨te
                        dataReceived = self.serialPort.readline()
                        if not dataReceived:
                            break
                            
                        decodedData = dataReceived.decode('utf-8', errors='replace').strip()
                        lines_read += 1
                        
                        if not decodedData:
                            continue
                            
                        print(f"DonnÃ©es reÃ§ues du port sÃ©rie: '{decodedData}'")
                        
                        # Ignorer les lignes qui contiennent seulement des tirets (sÃ©parateurs)
                        if decodedData.strip('-') == '':
                            continue
                            
                        # Ignorer les lignes spÃ©ciales comme "Fin des lectures" ou "RÃ©actualisation dans X secondes"
                        if "Fin des lectures" in decodedData or "RÃ©actualisation" in decodedData or "ğŸ‘¾" in decodedData:
                            print(f"Ligne de contrÃ´le ignorÃ©e: {decodedData}")
                            continue
                            
                        # Nettoyer les donnÃ©es en supprimant le prÃ©fixe "Message envoyÃ© :" si prÃ©sent
                        if "Message envoyÃ©" in decodedData or "Message envoy" in decodedData:
                            cleanedData = decodedData
                            for prefix in ["Message envoyÃ© :", "Message envoyÃƒÂ© :", "Message envoy :"]:
                                cleanedData = cleanedData.replace(prefix, "").strip()
                            print(f"DonnÃ©es nettoyÃ©es: '{cleanedData}'")
                            decodedData = cleanedData
                        
                        # Ajouter Ã  notre collection de donnÃ©es si non vide
                        if decodedData and not decodedData.isspace():
                            collected_data.append(decodedData)
                        
                        # VÃ©rifier s'il y a encore des donnÃ©es disponibles
                        try:
                            available_bytes = self.serialPort.in_waiting
                        except AttributeError:
                            available_bytes = self.serialPort.inWaiting()
                    
                    print(f"Nombre total de lignes traitÃ©es: {lines_read}")
                    
                    # Traiter les donnÃ©es collectÃ©es
                    if collected_data:
                        # PrioritÃ© aux messages spÃ©cifiques SI1145-Visible, MQ135-Air Quality, HC-SR04-Distance et BME680
                        visible_data = None
                        air_quality_data = None
                        distance_data = None
                        mq135_raw_data = None
                        bme680_temp_data = None
                        bme680_press_data = None
                        bme680_hum_data = None
                        
                        # Identifier d'abord les messages importants
                        for data_line in collected_data:
                            # DonnÃ©es luminositÃ© SI1145
                            if "SI1145" in data_line and "Visible" in data_line:
                                visible_data = data_line
                                print(f"DonnÃ©es SI1145-Visible dÃ©tectÃ©es: {visible_data}")
                            
                            # DonnÃ©es Air Quality MQ135
                            if "MQ135" in data_line and "Air Quality" in data_line:
                                air_quality_data = data_line
                                print(f"DonnÃ©es MQ135-Air Quality dÃ©tectÃ©es: {air_quality_data}")
                            
                            # DonnÃ©es MQ135 brutes
                            if "MQ135" in data_line and "Valeur lue" in data_line:
                                mq135_raw_data = data_line
                                print(f"DonnÃ©es MQ135 brutes dÃ©tectÃ©es: {mq135_raw_data}")
                            
                            # DonnÃ©es distance HC-SR04
                            if "HC_SR04" in data_line and "Distance" in data_line:
                                distance_data = data_line
                                print(f"DonnÃ©es HC-SR04 Distance dÃ©tectÃ©es: {distance_data}")
                            
                            # DonnÃ©es BME680
                            if "BME680" in data_line:
                                if "Temperature" in data_line:
                                    bme680_temp_data = data_line
                                    print(f"DonnÃ©es BME680-Temperature dÃ©tectÃ©es: {bme680_temp_data}")
                                elif "Pression" in data_line:
                                    bme680_press_data = data_line
                                    print(f"DonnÃ©es BME680-Pression dÃ©tectÃ©es: {bme680_press_data}")
                                elif "HumiditÃ©" in data_line or "Humidite" in data_line:
                                    bme680_hum_data = data_line
                                    print(f"DonnÃ©es BME680-HumiditÃ© dÃ©tectÃ©es: {bme680_hum_data}")
                        
                        # Traiter en prioritÃ© les donnÃ©es importantes
                        # SI1145 - Visible
                        if visible_data:
                            updateSuccess = self.sensor.updateFromStr(visible_data)
                            if updateSuccess:
                                print(f"LuminositÃ© mise Ã  jour avec succÃ¨s: {self.sensor.luminosity}")
                            else:
                                print(f"Ã‰chec de mise Ã  jour de la luminositÃ© avec: {visible_data}")
                        
                        # MQ135 - Air Quality spÃ©cifique
                        if air_quality_data:
                            updateSuccess = self.sensor.updateFromStr(air_quality_data)
                            if updateSuccess:
                                print(f"Air Quality mis Ã  jour avec succÃ¨s: {self.sensor.air_quality}")
                            else:
                                print(f"Ã‰chec de mise Ã  jour de l'Air Quality avec: {air_quality_data}")
                        
                        # MQ135 - Valeur brute (fallback pour Air Quality)
                        if mq135_raw_data and not air_quality_data:
                            updateSuccess = self.sensor.updateFromStr(mq135_raw_data)
                            if updateSuccess:
                                print(f"Air Quality estimÃ©s depuis MQ135 brut: Air Quality={self.sensor.air_quality}")
                            else:
                                print(f"Ã‰chec de mise Ã  jour Air Quality depuis valeur brute avec: {mq135_raw_data}")
                        
                        # HC-SR04 - Distance
                        if distance_data:
                            updateSuccess = self.sensor.updateFromStr(distance_data)
                            if updateSuccess:
                                print(f"Distance mise Ã  jour avec succÃ¨s: {self.sensor.distance}")
                            else:
                                print(f"Ã‰chec de mise Ã  jour de la distance avec: {distance_data}")
                        
                        # BME680 - TempÃ©rature
                        if bme680_temp_data:
                            updateSuccess = self.sensor.updateFromStr(bme680_temp_data)
                            if updateSuccess:
                                print(f"TempÃ©rature BME680 mise Ã  jour avec succÃ¨s: {self.sensor.temperature}")
                            else:
                                print(f"Ã‰chec de mise Ã  jour de la tempÃ©rature avec: {bme680_temp_data}")
                                
                        # BME680 - Pression
                        if bme680_press_data:
                            updateSuccess = self.sensor.updateFromStr(bme680_press_data)
                            if updateSuccess:
                                print(f"Pression BME680 mise Ã  jour avec succÃ¨s: {self.sensor.pressure}")
                            else:
                                print(f"Ã‰chec de mise Ã  jour de la pression avec: {bme680_press_data}")
                                
                        # BME680 - HumiditÃ©
                        if bme680_hum_data:
                            updateSuccess = self.sensor.updateFromStr(bme680_hum_data)
                            if updateSuccess:
                                print(f"HumiditÃ© BME680 mise Ã  jour avec succÃ¨s: {self.sensor.humidity}")
                            else:
                                print(f"Ã‰chec de mise Ã  jour de l'humiditÃ© avec: {bme680_hum_data}")
                        
                        # Traiter ensuite les autres donnÃ©es
                        for data_line in collected_data:
                            # Ne pas retraiter les donnÃ©es spÃ©cifiques
                            if (data_line != visible_data and data_line != air_quality_data and
                                data_line != bme680_temp_data and data_line != bme680_press_data and
                                data_line != bme680_hum_data and data_line != distance_data and
                                data_line != mq135_raw_data):
                                updateSuccess = self.sensor.updateFromStr(data_line)
                                if updateSuccess:
                                    print(f"Autres donnÃ©es capteurs mises Ã  jour: {self.sensor.toDict()}")
                else:
                    # Attendre un court instant et rÃ©essayer
                    import time
                    time.sleep(0.1)  # Attendre 100ms
            else:
                print("Port sÃ©rie non disponible")
        except Exception as e:
            print(f"Erreur lors de la lecture des donnÃ©es sÃ©rie: {str(e)}")
            import traceback
            traceback.print_exc()

    # GÃ©nÃ¨re des donnÃ©es de dÃ©monstration
    def _generateDemoData(self):
        # Des valeurs rÃ©alistes pour la dÃ©mo
        # D'abord gÃ©nÃ©rer AQ
        self.sensor.air_quality = random.uniform(400, 1200);  # Air Quality en ppm
        
        self.sensor.distance = random.uniform(0.5, 5.0);
        self.sensor.luminosity = random.randint(200, 2000);  # Ã‰chelle Visible
        self.sensor.temperature = random.uniform(15, 35);
        self.sensor.pressure = random.randint(980, 1020);
        self.sensor.humidity = random.randint(20, 80);
        
        # Afficher les valeurs gÃ©nÃ©rÃ©es pour le dÃ©bogage
        print(f"Demo data gÃ©nÃ©rÃ©: Air Quality={self.sensor.air_quality} ppm")
        print(f"luminosity={self.sensor.luminosity}, temperature={self.sensor.temperature}, " +
              f"humidity={self.sensor.humidity}, pressure={self.sensor.pressure}")

    # Force la lecture mÃªme si aucune donnÃ©e n'est disponible
    def forceReadSerial(self, timeout=1.0):
        if not self.serialPort:
            print("Port sÃ©rie non disponible pour la lecture forcÃ©e")
            return False
            
        try:
            # Sauvegarder le timeout actuel
            old_timeout = self.serialPort.timeout
            
            # DÃ©finir un nouveau timeout
            self.serialPort.timeout = timeout
            
            # Lire les donnÃ©es
            dataReceived = self.serialPort.readline()
            if dataReceived:
                decodedData = dataReceived.decode('utf-8', errors='replace').strip()
                print(f"DonnÃ©es reÃ§ues en lecture forcÃ©e: {decodedData}")
                
                # Ignorer les lignes spÃ©ciales comme "Fin des lectures" ou "RÃ©actualisation dans X secondes"
                if "Fin des lectures" in decodedData or "RÃ©actualisation" in decodedData or "ğŸ‘¾" in decodedData:
                    print(f"Ligne de contrÃ´le ignorÃ©e en lecture forcÃ©e: {decodedData}")
                    # Restaurer le timeout d'origine
                    self.serialPort.timeout = old_timeout
                    return False
                
                # Nettoyer les donnÃ©es en supprimant le prÃ©fixe "Message envoyÃ© :" si prÃ©sent
                if "Message envoyÃ©" in decodedData or "Message envoy" in decodedData:
                    cleanedData = decodedData
                    for prefix in ["Message envoyÃ© :", "Message envoyÃƒÂ© :", "Message envoy :"]:
                        cleanedData = cleanedData.replace(prefix, "").strip()
                    print(f"DonnÃ©es nettoyÃ©es: {cleanedData}")
                    decodedData = cleanedData
                
                # Mettre Ã  jour les valeurs du capteur
                if decodedData and not decodedData.isspace():
                    updateSuccess = self.sensor.updateFromStr(decodedData)
                    if updateSuccess:
                        print(f"Valeurs du capteur mises Ã  jour: {self.sensor.toDict()}")
                        # Restaurer le timeout d'origine
                        self.serialPort.timeout = old_timeout
                        return True
            else:
                print("Aucune donnÃ©e reÃ§ue lors de la lecture forcÃ©e")
                
            # Restaurer le timeout d'origine
            self.serialPort.timeout = old_timeout
            return False
            
        except Exception as e:
            print(f"Erreur lors de la lecture forcÃ©e: {str(e)}")
            return False

    # Envoie une commande pour demander des donnÃ©es
    def requestData(self, command='DATA'):
        """
        Envoie une commande au port sÃ©rie pour demander des donnÃ©es.
        Certains dispositifs (Arduino/XBee) attendent une commande pour envoyer des donnÃ©es.
        
        Args:
            command: La commande Ã  envoyer (par dÃ©faut 'DATA')
            
        Returns:
            True si la commande a Ã©tÃ© envoyÃ©e, False sinon
        """
        if not self.serialPort:
            print("Port sÃ©rie non disponible pour l'envoi de commande")
            return False
            
        try:
            # Assurer que la commande se termine par un retour Ã  la ligne
            if not command.endswith('\n'):
                command += '\n'
                
            # Envoyer la commande encodÃ©e en bytes
            self.serialPort.write(command.encode('utf-8'))
            self.serialPort.flush()  # S'assurer que les donnÃ©es sont envoyÃ©es
            print(f"Commande '{command.strip()}' envoyÃ©e sur le port sÃ©rie")
            
            # Attendre un court instant pour que l'appareil traite la commande
            import time
            time.sleep(0.5)
            
            return True
        except Exception as e:
            print(f"Erreur lors de l'envoi de la commande: {str(e)}")
            return False

    # Lit les donnÃ©es des capteurs et retourne une chaÃ®ne formatÃ©e
    def readData(self):
        if self.demoMode:
            # GÃ©nÃ©rer des donnÃ©es de dÃ©mo
            self._generateDemoData();
            # Inclure les mesures de AQ
            data = f"AQ:{self.sensor.air_quality:.2f},DIST:{self.sensor.distance:.2f},LUM:{self.sensor.luminosity},TEMP:{self.sensor.temperature:.1f},HUM:{self.sensor.humidity},PRESS:{self.sensor.pressure}";
            print(f"DonnÃ©es gÃ©nÃ©rÃ©es en mode dÃ©mo: {data}")
            return data
        elif self.serialPort:
            try:
                # Enregistrer l'Ã©tat initial des capteurs
                initial_state = self.sensor.toDict().copy()
                
                # Demander des donnÃ©es et lire les rÃ©ponses
                self.requestData()
                self._readSerialData()
                
                # VÃ©rifier si des donnÃ©es ont Ã©tÃ© mises Ã  jour
                current_state = self.sensor.toDict()
                changed = False
                
                for key, value in current_state.items():
                    if initial_state[key] != value:
                        changed = True
                        print(f"Valeur changÃ©e: {key} = {value} (avant: {initial_state[key]})")
                
                # Si aucune valeur n'a changÃ©, essayer une lecture forcÃ©e
                if not changed:
                    print("Aucune valeur n'a Ã©tÃ© mise Ã  jour, tentative de lecture forcÃ©e")
                    if not self.forceReadSerial():
                        print("Lecture forcÃ©e Ã©chouÃ©e")
                        # VÃ©rifier si nous avons au moins certaines valeurs non-nulles
                        if all(v is None for v in current_state.values()):
                            return None
                
                # Construire une chaÃ®ne complÃ¨te formatÃ©e avec toutes les valeurs connues
                # C'est important pour le contrÃ´leur qui utilisera ces donnÃ©es pour l'interface
                formatted_values = []
                
                # Ajouter chaque valeur disponible (non nulle)
                if self.sensor.air_quality is not None:
                    formatted_values.append(f"AQ:{self.sensor.air_quality:.2f}")
                
                if self.sensor.distance is not None:
                    formatted_values.append(f"DIST:{self.sensor.distance:.2f}")
                    
                if self.sensor.luminosity is not None:
                    formatted_values.append(f"LUM:{self.sensor.luminosity}")
                    
                if self.sensor.uvIndex is not None:
                    formatted_values.append(f"UV:{self.sensor.uvIndex:.2f}")
                    
                if self.sensor.irValue is not None:
                    formatted_values.append(f"IR:{self.sensor.irValue}")
                    
                if self.sensor.temperature is not None:
                    formatted_values.append(f"TEMP:{self.sensor.temperature:.1f}")
                    
                if self.sensor.humidity is not None:
                    formatted_values.append(f"HUM:{self.sensor.humidity}")
                    
                if self.sensor.pressure is not None:
                    formatted_values.append(f"PRESS:{self.sensor.pressure}")
                
                # Joindre toutes les valeurs formatÃ©es
                formattedData = ",".join(formatted_values)
                
                if not formattedData:
                    print("Aucune donnÃ©e formatÃ©e disponible")
                    return None
                    
                print(f"DonnÃ©es formatÃ©es retournÃ©es: {formattedData}")
                return formattedData
            except Exception as e:
                print(f"Erreur lors de la lecture des donnÃ©es: {str(e)}")
                import traceback
                traceback.print_exc()
                return None
        return None 